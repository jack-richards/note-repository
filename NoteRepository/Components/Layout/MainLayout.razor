@inherits LayoutComponentBase
@inject Components.Buttons.ButtonService ButtonService
@implements IDisposable

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        @if (ButtonService.ButtonComponentType != null) {
            <div class="top-row px-4">
                <DynamicComponent Type="@ButtonService.ButtonComponentType" Parameters="@ButtonService.ButtonComponentParameters" />
            </div>
        }

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    // Subscribe to button change event. When button is changed within the ButtonService
    // the ButtonChanged method will be called, refreshing the layout and rendering the appropriate button.
    protected override void OnInitialized()
        => this.ButtonService.ButtonChanged += this.ButtonChanged;

    private void ButtonChanged(object? sender, EventArgs e)
        => this.InvokeAsync(StateHasChanged);

    // Called automatically when a component is removed, this means we do not stay subscribed
    // to the event needlessly on pages where this button should not exist.
    public void Dispose()
        => this.ButtonService.ButtonChanged -= this.ButtonChanged;
}