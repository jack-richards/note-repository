@page "/notes/{name}"
@using MongoDB.Bson
@inject Components.Buttons.ButtonService ButtonService
@inject NoteService NoteService

<div class="container-md">
<h2><u>@name</u></h2>
@if (Content != null && Content.Count() > 0) {
    @foreach (var content in Content) {
            // Check if current text element is in edit mode or not.
            if (content.EditMode)
            {
                <div class="card">
                    <div class="card-body">
                        <!-- Bind data to interface, two way binding. -->
                        <input type="text" class="form-control" @bind="@content.Content"/>
                        <a @onclick="() => SaveChangesAsync(note, content)" class="btn btn-primary">Save</a>
                        <a @onclick="content.CancelChanges" class="btn btn-primary">Cancel</a>
                    </div>
                </div>
            } else {
                <div class="card">
                    <div class="card-body">
                    <p class="card-text">@content.Content</p>
                    <a @onclick="content.ToggleEditMode" class="btn btn-primary">Edit</a>
                    <a @onclick="() => DeleteContent(note, content)" class="btn btn-primary">Delete</a>
                    </div>
                </div>
            }
    }
} else {
    <p>No Notes</p>
}

<h2>Links</h2>
@if (links != null && links.Length > 0) {
    @foreach (var link in links) {
        <a href="@link">@link</a>
    }
} else {
    <p>No Links</p>
}
</div>

@code {
    [Parameter]
    public string name { get; set; }

    private Components.Models.NoteModel ?note { get; set; }

    private List<Models.ContentModel> ?Content { get; set; }

    private string[] links = [];

    // This lifecycle hook ensures that whenever the parameter (note name in the url) changes
    // the component executes the data fetching logic again.
    protected override async Task OnParametersSetAsync()
    {
        note = await NoteService.GetNoteByNameAsync(name);
        if (note != null && note.ContentsModel.Contents != null)
        {
            name = note.Name;
            Content = note.ContentsModel.Contents;
            links = note.ListLinks;

            // Trigger layout to render a create content button within its navbar.
            ButtonService.ChangeButton(typeof(Components.Buttons.CreateContentButton), new Dictionary<string, object>
            {
                { "Note", note }
            });
        }
    }

    private async Task SaveChangesAsync(Models.NoteModel note, Models.ContentModel content)
    {
        await NoteService.SaveNoteAsync(note);
        content.SaveChanges();
    }

    private void DeleteContent(Models.NoteModel note, Models.ContentModel content)
    {
        note.ContentsModel.DeleteContent(content);
    }
}
